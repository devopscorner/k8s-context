name: GitHub Build and Package Windows

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ImageName: 'devopcorner/k8s-context'
      AppName: 'k8s-context'

    strategy:
      matrix:
        os: [windows-latest]
        arch: [amd64]

    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up Go environment
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Install dependencies
        working-directory: src
        run: |
          go mod tidy

      - name: Build binary
        working-directory: src
        run: |
          GOOS=${{ matrix.os }}
          GOARCH=${{ matrix.arch }}
          go build -o ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }} main.go

      - name: Create .exe package
        working-directory: src
        if: matrix.os == 'windows-latest'
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-H windowsgui -linkmode internal" -o ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.exe main.go

      - name: Create .zip package for Windows
        working-directory: src
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}
          cp -r ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.exe ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}/${env.AppName}.exe
          zip -r ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.zip ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}/

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.AppName }}
          path: |
            ${{ env.AppName }}-windows-amd64.exe
            ${{ env.AppName }}-windows-amd64.zip
