name: GitHub Build and Package

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ImageName: 'devopcorner/k8s-context'
      AppName: 'k8s-context'

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up Go environment
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Install dependencies
        run: |
          go mod tidy
        working-directory: src

      - name: Build binary
        run: |
          GOOS=${{ matrix.os }}
          GOARCH=${{ matrix.arch }}
          go build -o ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }} main.go
        working-directory: src

      - name: Create .deb package
        run: |
          sudo apt-get install ruby-dev rubygems build-essential
          sudo gem install fpm
          fpm -s dir -t deb -n ${{ env.AppName }} -v ${{ github.ref_name }} ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}=/usr/local/bin/
        working-directory: src
        if: matrix.os == 'ubuntu-latest'

      - name: Create .exe package
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-H windowsgui -linkmode internal" -o ${{ env.AppName }}-windows-amd64.exe main.go
        working-directory: src
        if: matrix.os == 'windows-latest'

      - name: Create .bin package for ARM64
        run: |
          # Create the tarball and checksum
          tar czf ${{ env.AppName }}-linux-arm64.tar.gz ${{ env.AppName }}-linux-arm64
          shasum -a 256 ${{ env.AppName }}-linux-arm64.tar.gz > ${{ env.AppName }}-linux-arm64.tar.gz.sha256
        working-directory: src
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'

      - name: Create .bin package for AMD64
        run: |
          # Create the tarball and checksum
          tar czf ${{ env.AppName }}-linux-amd64.tar.gz ${{ env.AppName }}-linux-amd64
          shasum -a 256 ${{ env.AppName }}-linux-amd64.tar.gz > ${{ env.AppName }}-linux-amd64.tar.gz.sha256
        working-directory: src
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'

      - name: Create .pkg package for macOS
        run: |
          mkdir -p pkgroot/usr/local/bin/
          cp -r ${{ env.AppName }}-macos-latest-amd64 pkgroot/usr/local/bin/${{ env.AppName }}
          pkgbuild --identifier com.${{ env.AppName }}.pkg --version ${{ github.ref_name }} --install-location /usr/local/bin pkgroot ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.pkg
          rm -rf pkgroot
        working-directory: .
        if: matrix.os == 'macos-latest' && matrix.arch == 'amd64'

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.AppName }}
          path: |
            ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.deb
            ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.exe
            ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}.pkg
            ${{ env.AppName }}-linux-arm64.tar.gz
            ${{ env.AppName }}-linux-arm64.tar.gz.sha256
            ${{ env.AppName }}-linux-amd64.tar.gz
            ${{ env.AppName }}-linux-amd64.tar.gz.sha256