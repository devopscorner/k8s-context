name: GitHub Build and Package Linux

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ImageName: 'devopcorner/k8s-context'
      AppName: 'k8s-context'

    strategy:
      matrix:
        os: [ubuntu-latest]
        arch: [amd64]

    steps:
      - name: Checkout code at release tag
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up Go environment
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Install dependencies
        run: |
          go mod tidy
        working-directory: src

      - name: Build binary
        run: |
          GOOS=${{ matrix.os }}
          GOARCH=${{ matrix.arch }}
          go build -o ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }} main.go
        working-directory: src

      - name: Create .deb package
        run: |
          sudo apt-get install ruby-dev rubygems build-essential
          sudo gem install fpm
          fpm -s dir -t deb -n ${{ env.AppName }} -v ${{ github.ref_name }} ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }}=/usr/local/bin/
        working-directory: src
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'

      - name: Create .zip package for Linux AMD64
        run: |
          mkdir ${env.AppName}-linux-${{ matrix.arch }}
          cp ${{ env.AppName }}-${{ matrix.os }}-${{ matrix.arch }} ${env.AppName}-linux-${{ matrix.arch }}/${env.AppName}}
          zip -r ${env.AppName}-linux-${{ matrix.arch }}.zip ${env.AppName}-linux-${{ matrix.arch }}/
        working-directory: src
        if: matrix.os == 'ubuntu-latest && matrix.arch == 'amd64'

      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.AppName }}
          path: |
            ${{ env.AppName }}-linux-amd64.deb
            ${{ env.AppName }}-linux-amd64.zip
